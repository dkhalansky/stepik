stepik(1) -- взаимодействие со stepik.org
=========================================

## ОБЗОР

    stepik SELECTOR [COMMAND]

    SELECTOR := { [--course-id ИД | --course { ИМЯ | LIST_TRAV } ] |
                  [--lesson-id ИД | --lesson { ИМЯ | LIST_TRAV } ] |
                  [--step-id   ИД | --step   { ИМЯ | LIST_TRAV } ] }

    LIST_TRAV := { first | last | НОМЕР }

    COMMAND := { courses | lessons | steps | send [ЯЗЫК] |
                 text | video | languages | template ЯЗЫК }

## ОПИСАНИЕ

**stepik** -- утилита для работы с сервисом онлайн-уроков stepik.org. Чтобы
ей пользоваться, необходимо на странице https://stepik.org/oauth2/applications/
создать новое приложение с настройками `client type = confidential` и
`authorization grant type = client-credentials`. С той же страницы нужно
сохранить `client id` и `client secret` нового приложения. Эти сведения нужно
записать в файл `~/.config/stepik/stepik.conf`. Пример такого файла:

    client_id = ...
    client_secret = ...

После этого можно осуществлять запросы к Stepik.

Каждый вид запроса привязан к какой-то сущности сайта Stepik: к курсу, к уроку
на курсе или к степу в уроке. К примеру, запрос `text`, выводящий текст степа,
требует, чтобы был указан степ.

Если не указана команда, то самый глубокий селектор (степ глубже урока, урок
глубже курса) из известных программе выведет на стандартный поток вывода
идентификатор, соответствующий данному селектору.

## СЕЛЕКТОРЫ

Селектор -- это способ задания **stepik** информации о том, к какому курсу,
уроку или степу относится запрос. Каждый селектор поддерживает несколько
вариаций: по идентификатору (например, `--course-id`), по смещению (`first`,
`last`, или число от 1) и по имени. Поиск по имени осуществляется fuzzy
search'ем, то есть запрос *TAPL* найдёт курс под названием *AU TAPL 2018*, а
запрос *вироятн* найдёт курс *Теория вероятностей*. У степов нет имени,
поэтому по ним нельзя делать fuzzy search.

Также можно для удобства сохранять идентификаторы курса, урока или степа в
переменных окружения `STEPIK_COURSE`, `STEPIK_LESSON` и `STEPIK_STEP`.

## КОМАНДЫ

  * `courses`:
    Выдать список курсов, на которые записан пользователь.

  * `lessons`:
    Требует селектор курса. Выдаёт список уроков в данном курсе.

  * `steps`:
    Требует селектор урока. Выдаёт список степов в данном уроке.

  * `text`:
    Требует селектор степа. Выдаёт на поток стандартного вывода текст данного
    степа в формате pandoc markdown.

  * `video`:
    Требует селектор степа. Выдаёт на поток стандартного вывода ссылку на
    видео данного степа в наибольшем доступном разрешении.

  * `languages`:
    Требует селектор степа. Работает для степов типа "задача на
    программирование". Выдаёт список языков, на которых можно решать данную
    задачу.

  * `template` ЯЗЫК:
    Требует селектор степа. Работает для степов типа "задача на
    программирование". Выдаёт шаблон для данной задачи на данном языке.

  * `send` [ЯЗЫК]:
    Требует селектор степа. Для степов типа "задача на программирование"
    требует параметр **ЯЗЫК**. Отсылает поданное на стандартный вход решение,
    дожидается проверки и выдаёт сообщение о том, корректное ли решение, и
    если нет, то также предоставляет ответ системы о том, почему.

## ОТПРАВКА РЕШЕНИЙ

  * Математическая задача, Численная задача, Свободный ответ, Текстовая задача:
    На стандартный вход нужно подать содержимое поля ввода.

  * Тест:
    На стандартный вход нужно подать набор из разделённых пробелами нулей и
    единиц, где единица обозначает, что ответ нужно отметить галочкой, а ноль --
    что ответ не нужно отмечать. Если тест подразумевает только один правильный
    ответ, интерфейс всё равно тот же самый: просто на вход нужно будет подавать
    всего одну единицу, а остальные нули.

  * Задача на сортировку:
    На стандартный вход нужно подать набор из разделённых пробелами индексов
    пунктов.

  * Задача на сопоставление:
    На стандартный вход нужно подать набор из разделённых пробелами индексов
    пунктов второй колонки -- то есть нужно отсортировать вторую колонку так,
    чтобы она соответствовала первой.

  * Задача на программирование:
    На стандартный вход подаётся текст программы.

## ПЕРЕМЕННЫЕ ОКРУЖЕНИЯ

  * `STEPIK_COURSE`:
    Идентификатор курса; если эта переменная установлена, селектор курса можно
    не указывать командной строке.

  * `STEPIK_LESSON`:
    Идентификатор урока; если эта переменная установлена, селектор урока можно
    не указывать командной строке.

  * `STEPIK_STEP`:
    Идентификатор степа; если эта переменная установлена, селектор степа можно
    не указывать командной строке.

## ПРИМЕРЫ

    # вывести список курсов
    stepik courses
    # работать с курсом "Теория вероятностей"
    STEPIK_COURSE=`stepik --course вероят`
    # вывести список уроков
    # эквивалентно "stepik --course вероят lessons", если не указана переменная
    stepik lessons
    # работать с уроком с id = 48659
    STEPIK_LESSON=48659
    # вывести список степов
    stepik steps
    # получить текст первого степа
    stepik --step 1 text
    # посмотреть в браузере текст первого степа
    stepik --step 1 text | pandoc -s > text.html
    firefox text.html
    # посмотреть видео третьего степа
    mplayer `stepik --step 3 video`
    # посмотреть видео третьего степа в консоли
    mplayer -vo caca -fs -really-quiet `stepik --step 3 video`

## АВТОРЫ

Халанский Дмитрий, Макеев Владимир, Чернышёв Ярослав.

## СМОТРИ ТАКЖЕ

mplayer(1), pandoc(1)
